name: CI Tests for Pull Requests

on:
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: üß™ Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]  # [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.13]  # ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          check-latest: true

      - name: üîß Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade poetry

      - name: üìö Install Dependencies
        run: poetry install --with test

      - name: üß™ Run Tests
        id: tests
        run: make tests
        continue-on-error: true

      - name: üìä Set Test Status
        if: always()
        run: |
          echo "os=${{ matrix.os }}" >> $GITHUB_OUTPUT
          echo "python=${{ matrix.python-version }}" >> $GITHUB_OUTPUT
          echo "status=${{ steps.tests.outcome }}" >> $GITHUB_OUTPUT
        id: test_status

  report:
    name: üìù Report Test Results
    needs: test
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: üìä Generate Report
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            const testJobs = jobs.data.jobs.filter(job => job.name.includes('üß™ Tests'));

            let tableRows = [];
            for (const job of testJobs) {
              const name = job.name;
              const status = job.conclusion === 'success' ? '‚úÖ success' : '‚ùå failure';
              const emoji = job.conclusion === 'success' ? '‚úÖ' : '‚ùå';

              // Extract OS and Python version from job name or use job.name if not possible
              const match = name.match(/OS: (.*), Python: (.*)/);
              const os = match ? match[1].replace('-latest', '') : 'unknown';
              const python = match ? match[2] : 'unknown';

              tableRows.push(`| ${os} | ${python} | ${emoji} ${job.conclusion} |`);
            }

            const message = `
            ### Thank you for your commit! üôè

            Here are the test results:

            | OS | Python Version | Status |
            |----|----------------|--------|
            ${tableRows.join('\n')}

            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
