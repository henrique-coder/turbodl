name: CI Tests for Pull Requests

on:
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: üß™ Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          check-latest: true

      - name: üîß Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade poetry

      - name: üìö Install Dependencies
        run: poetry install --with test

      - name: üß™ Run Tests
        id: tests
        run: make tests

      - name: üìä Collect Test Results
        if: always()
        run: |
          echo "OS=${{ matrix.os }}" >> $GITHUB_OUTPUT
          echo "PYTHON_VERSION=${{ matrix.python-version }}" >> $GITHUB_OUTPUT
          echo "STATUS=${{ steps.tests.outcome }}" >> $GITHUB_OUTPUT

  report:
    name: üìù Report Test Results
    needs: test
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: üìä Generate Report
        uses: actions/github-script@v7
        with:
          script: |
            const testResults = ${{ toJson(needs.test.outputs) }};
            const emoji = (status) => status === 'success' ? '‚úÖ' : '‚ùå';
            const formatOS = (os) => os.replace('-latest', '');

            const resultsTable = Object.entries(testResults)
              .map(([key, value]) => {
                const [os, pythonVersion, status] = value.split(',');
                return `| ${formatOS(os)} | ${pythonVersion} | ${emoji(status)} ${status} |`;
              })
              .join('\n');

            const message = `
            ### Thank you for your commit! üôè

            Here are the test results:

            | OS | Python Version | Status |
            |----|----------------|--------|
            ${resultsTable}

            [View Details](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
