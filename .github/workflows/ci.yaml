name: CI Tests for Pull Requests

on:
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: 🧪 Tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.13"]

    steps:
      - name: 🔒 Security Scan Dependencies
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
          disable-sudo: ${{ matrix.os == 'ubuntu-latest' }}

      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          check-latest: true

      - name: 🔧 Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade poetry

      - name: 📚 Install Dependencies
        run: poetry install --with test

      - name: 🧪 Run Tests
        id: tests
        run: make tests

      - name: 📝 Report Test Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const os = '${{ matrix.os }}'.replace('-latest', '');
            const success = '${{ steps.tests.outcome }}' === 'success';
            const emoji = success ? '✅' : '❌';
            const status = success ? 'passed' : 'failed';
            const header = `### ${emoji} Test Results for ${os} (Python ${{ matrix.python-version }})\n\n`;
            const details = [
              `**OS**: ${os}`,
              `**Python Version**: ${{ matrix.python-version }}`,
              `**Status**: ${status}`,
              `**Run ID**: ${process.env.GITHUB_RUN_ID}`,
              '',
              `[View Details](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`
            ].join('\n');
            const message = header + details;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
